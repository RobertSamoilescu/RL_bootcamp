import numpy as np
import matplotlib.pyplot as plt


#####################
####  7  8  9 10 ####
####  4  *  5  6 ####
####  0  1  2  3 ####
#####################

# define states

states = np.arange(11, dtype=np.int)

# define actions UP, DOWN, LEFT, RIGHT

actions = np.arange(4)

str_actions = ["UP", "DOWN", "LEFT", "RIGHT"]


# define policy

pi = np.random.randint(4, size=11).reshape(-1, 1)

# define rewards per state

rewards = np.array([.0, .0, .0, .0, .0, .0, -1., .0, .0, .0, 1.])

# define state-action transition for UP action 

#####################
####  7  8  9 10 ####
####  4  *  5  6 ####
####  0  1  2  3 ####
#####################

t_up = np.array([
	# 0   1   2   3   4   5   6   7   8   9   10
	[.1, .1, .0, .0, .8, .0, .0, .0, .0, .0, .0], # 0
	[.1, .8, .1, .0, .0, .0, .0, .0, .0, .0, .0], # 1
	[.0, .1, .0, .1, .0, .8, .0, .0, .0, .0, .0], # 2
	[.0, .0, .1, .1, .0, .0, .8, .0, .0, .0, .0], # 3 
	[.0, .0, .0, .0, .2, .0, .0, .8, .0, .0, .0], # 4
	[.0, .0, .0, .0, .0, .1, .1, .0, .0, .8, .0], # 5
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 6
	[.0, .0, .0, .0, .0, .0, .0, .9, .1, .0, .0], # 7
	[.0, .0, .0, .0, .0, .0, .0, .1, .8, .1, .0], # 8
	[.0, .0, .0, .0, .0, .0, .0, .0, .1, .8, .1], # 9
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 10
])


# define state-action transition for DOWN action

#####################
####  7  8  9 10 ####
####  4  *  5  6 ####
####  0  1  2  3 ####
#####################

t_down = np.array([
	# 0   1   2   3   4   5   6   7   8   9   10
	[.9, .1, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 0
	[.1, .8, .1, .0, .0, .0, .0, .0, .0, .0, .0], # 1
	[.0, .1, .8, .1, .0, .0, .0, .0, .0, .0, .0], # 2
	[.0, .0, .1, .9, .0, .0, .0, .0, .0, .0, .0], # 3 
	[.8, .0, .0, .0, .2, .0, .0, .0, .0, .0, .0], # 4
	[.0, .0, .8, .0, .0, .1, .1, .0, .0, .0, .0], # 5
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 6
	[.0, .0, .0, .0, .8, .0, .0, .1, .1, .0, .0], # 7
	[.0, .0, .0, .0, .0, .0, .0, .1, .8, .1, .0], # 8
	[.0, .0, .0, .0, .0, .8, .0, .0, .1, .0, .1], # 9
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 10
])


# define state-action transition for LEFT action

#####################
####  7  8  9 10 ####
####  4  *  5  6 ####
####  0  1  2  3 ####
#####################

t_left = np.array([
	# 0   1   2   3   4   5   6   7   8   9   10
	[.9, .0, .0, .0, .1, .0, .0, .0, .0, .0, .0], # 0
	[.8, .2, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 1
	[.0, .8, .1, .0, .0, .1, .0, .0, .0, .0, .0], # 2
	[.0, .0, .8, .1, .0, .0, .1, .0, .0, .0, .0], # 3 
	[.1, .0, .0, .0, .8, .0, .0, .1, .0, .0, .0], # 4
	[.0, .0, .1, .0, .0, .8, .0, .0, .0, .1, .0], # 5
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 6
	[.0, .0, .0, .0, .1, .0, .0, .9, .0, .0, .0], # 7
	[.0, .0, .0, .0, .0, .0, .0, .8, .2, .0, .0], # 8
	[.0, .0, .0, .0, .0, .1, .0, .0, .8, .1, .0], # 9
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, 0.], # 10
])


# define state-action transtion for RIGHT action

#####################
####  7  8  9 10 ####
####  4  *  5  6 ####
####  0  1  2  3 ####
#####################

t_right = np.array([
	# 0   1   2   3   4   5   6   7   8   9   10
	[.1, .8, .0, .0, .1, .0, .0, .0, .0, .0, .0], # 0
	[.0, .2, .8, .0, .0, .0, .0, .0, .0, .0, .0], # 1
	[.0, .0, .1, .8, .0, .1, .0, .0, .0, .0, .0], # 2
	[.0, .0, .0, .9, .0, .0, .1, .0, .0, .0, .0], # 3 
	[.1, .0, .0, .0, .8, .0, .0, .1, .0, .0, .0], # 4
	[.0, .0, .1, .0, .0, .0, .8, .0, .0, .1, .0], # 5
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 6
	[.0, .0, .0, .0, .1, .0, .0, .1, .8, .0, .0], # 7
	[.0, .0, .0, .0, .0, .0, .0, .0, .2, .8, .0], # 8
	[.0, .0, .0, .0, .0, .1, .0, .0, .0, .1, .8], # 9
	[.0, .0, .0, .0, .0, .0, .0, .0, .0, .0, .0], # 10
])

T = [t_up, t_down, t_left, t_right]

if __name__ == "__main__":
	assert np.isclose(t_up.sum(), 9), "Wrong UP transitions "
	assert np.isclose(t_down.sum(), 9), "Wrong DOWN transitions"
	assert np.isclose(t_left.sum(), 9), "Wrong LEFT transitions"
	assert np.isclose(t_right.sum(), 9), "Wrong RIGTH transitions"
